// === Types ===
type NonEmptyString {
  validate() { this.length > 0 }
}

type Member {
    email: NonEmptyString
    firstname: NonEmptyString
    lastname: NonEmptyString
    executive: Boolean
    payments: Boolean[] | Null
    phone: NonEmptyString
    studentid: NonEmptyString
    type: NonEmptyString
    university: NonEmptyString
    uid: NonEmptyString | Null
}

type User {
    info: UserInfo
    member: NonEmptyString | Null
    join_token: NonEmptyString | Null // When joining wih a member, this is where the User stores the member ID before they are allowed to associate with it
}

type UserInfo {
    displayName: NonEmptyString
    email: NonEmptyString
    emailVerified: Boolean
    photoUrl: NonEmptyString
}

type Transaction {
    amount: Number
    bankreference: NonEmptyString
    date: NonEmptyString
    member: NonEmptyString
    type: NonEmptyString
}

type Executive {
    position: NonEmptyString
}

type Invitation {
    // Invitation for users to accept to associate with a member
    // The invite key is the ID of the member to associate with
    message: NonEmptyString
}

// === Paths ===
path / {
    // Executives can read everything
    read() { userIsExecutive() }
}

path /users/{uid} is User {
    // Users may read their own information
    read() { isUser(uid) }
}

path /users/{uid}/member {
    // Users may write their member id only if it does not exist yet, or if they are an Executive
    write() { (isUser(uid) && prior(this) === null) || userIsExecutive() }
    // TODO and if no other user has claimed it yet... (prevent duplicate members)
}

path /users/{uid}/join_token {
    // Users may write their join_token, or if they are an Executive
    write() { isUser(uid) || userIsExecutive() }
    // TODO and if no other user has claimed it yet... (prevent duplicate members)
}

path /users/{uid}/info {
    // Users may write their own info
    write() { isUser(uid) }
}

path /members/{member_id} is Member {
    // Users can see their member data if there is an associated UID
    read() { userIsMember(member_id) }
    // Can write if is executive
    write() { userIsExecutive() }
}

path /members/{member_id}/uid {
    // User can write if 
    // Their join token matches this member 
    // AND they don't already have a member ID
    // AND the member does not already have an associated UID
    // AND they are writing their UID 
    // AND this is not a deletion
    write() { userHasJoinToken(member_id) && !userHasMember() && prior(this) === null && this === auth.uid }
}

path /transactions/{transaction_id} is Transaction {
    // Users may read a transaction if they are the member that made it
    read() { userIsMember(prior(this).member) }
    // Can write if is executive
    write() { userIsExecutive() }
}

path /executives is Executive[] { 
    // Can write if is executive
    write() { userIsExecutive() }
}

path /invitations/{member_id} {
    // All authenticated users may read individual invitations
    // ( the security here is only that nobody else who isn't associated with a member knows the key)
    read() { auth != null && prior(this) != null}
    // User may only delete here if they have accepted the invite they are deleting, or they are an executive
    write() { (userIsMember(member_id) && this === null) || userIsExecutive() }
}

// === Functions ===

// Is the user's UID the given UID
isUser(uid) {
  return auth != null && auth.uid == uid;
}

// Is the user associated with the given member_id
userIsMember(member_id) {
    return root.members[member_id].uid === auth.uid
}

// Is the user associated with the given member_id
userHasJoinToken(member_id) {
    return root.users[auth.uid].join_token === member_id
}

// Does the user have a member yet?
userHasMember() {
    return root.users[auth.uid].member != null
}

// Is the user an executive
userIsExecutive() {
    root.executives[root.users[auth.uid].member] != null
}